import io;
import Quicksort;

CompileIntArrayExample extends Quicksort  {


.field public intArrayField.array.i32;
.field public index.i32;
.field public assignedValue.i32;

.construct CompileIntArrayExample().V {
    invokespecial(this, "<init>").V;
}

.method public getArrayElement(index.i32).i32 {
   tmp0.array.i32 :=.array.i32 getfield(this, intArrayField.array.i32).array.i32;
tmp1.i32 :=.i32 tmp0.array.i32[index.i32].i32;
ret.i32 tmp1.i32;
}

.method public setArrayElement(index.i32, value.i32).i32 {
   putfield(this, assignedValue.i32, value.i32).V;

   tmp2.array.i32 :=.array.i32 new(array, value.i32).array.i32;
putfield(this, intArrayField.array.i32, tmp2.array.i32).V;

   tmp3.array.i32 :=.array.i32 getfield(this, intArrayField.array.i32).array.i32;
tmp4.i32 :=.i32 getfield(this, assignedValue.i32).i32;
tmp3.array.i32[index.i32].i32 :=.i32 tmp4.i32;

   tmp5.array.i32 :=.array.i32 getfield(this, intArrayField.array.i32).array.i32;
tmp6.i32 :=.i32 tmp5.array.i32[index.i32].i32;
ret.i32 tmp6.i32;
}

.method public initializeArray(size.i32).array.i32 {
   tmp7.array.i32 :=.array.i32 new(array, size.i32).array.i32;
putfield(this, intArrayField.array.i32, tmp7.array.i32).V;

   tmp8.array.i32 :=.array.i32 getfield(this, intArrayField.array.i32).array.i32;
ret.array.i32 tmp8.array.i32;
}

.method public updateArrayElement(intArrayField.array.i32).i32 {
   index.i32 :=.i32 0.i32;

   value.i32 :=.i32 1.i32;

   tmp9.array.i32 :=.array.i32 new(array, 2.i32).array.i32;
intArrayField.array.i32 :=.array.i32 tmp9.array.i32;

   intArrayField[0.i32].i32 :=.i32 1.i32;

   tmp10.i32 :=.i32 intArrayField.array.i32[0.i32].i32;
ret.i32 tmp10.i32;
}

.method public static main(args.array.String).V {
ret.V;
   }

}