TestArraysAndVarargs {




.construct TestArraysAndVarargs().V {
    invokespecial(this, "<init>").V;
}

.method public sum(numbers.array.i32).i32 {
   total.i32 :=.i32 0.i32;

   i.i32 :=.i32 0.i32;

   while0:
tmp0.i32 :=.i32 arraylength(numbers.array.i32).i32;
tmp1.bool :=.bool i.i32 <.bool tmp0.i32;
if (!.bool tmp1.bool) goto endWhile0;
tmp2.i32 :=.i32 numbers.array.i32[i.i32].i32;
tmp3.i32 :=.i32 total.i32 +.i32 tmp2.i32;
total.i32 :=.i32 tmp3.i32;
tmp4.i32 :=.i32 i.i32 +.i32 1.i32;
i.i32 :=.i32 tmp4.i32;

goto while0;
endWhile0:

   ret.i32 total.i32;
}

.method public createArray().array.i32 {
   tmp5.array.i32 :=.array.i32 new(array, 5.i32).array.i32;
arr.array.i32 :=.array.i32 tmp5.array.i32;

   arr[0.i32].i32 :=.i32 10.i32;

   arr[1.i32].i32 :=.i32 20.i32;

   arr[2.i32].i32 :=.i32 30.i32;

   arr[3.i32].i32 :=.i32 40.i32;

   arr[4.i32].i32 :=.i32 50.i32;

   ret.array.i32 arr.array.i32;
}

.method public accessArray().i32 {
   arr.array.i32 :=.array.i32 invokevirtual(this.TestArraysAndVarargs, "createArray").array.i32;

   tmp6.i32 :=.i32 arr.array.i32[2.i32].i32;
ret.i32 tmp6.i32;
}

.method public modifyArray().i32 {
   arr.array.i32 :=.array.i32 invokevirtual(this.TestArraysAndVarargs, "createArray").array.i32;

   arr[1.i32].i32 :=.i32 100.i32;

   ret.i32 0.i32;
}

.method public callWithArray().i32 {
   arr.array.i32 :=.array.i32 invokevirtual(this.TestArraysAndVarargs, "createArray").array.i32;

   tmp7.i32 :=.i32 invokevirtual(this.TestArraysAndVarargs, "sum", arr.array.i32).i32;
ret.i32 tmp7.i32;
}

.method public callWithVarargs().i32 {
   tmp8.i32 :=.i32 invokevirtual(this.TestArraysAndVarargs, "sum", 5.i32, 10.i32, 15.i32, 20.i32).i32;
ret.i32 tmp8.i32;
}

}
